import React from "react";
import qs from 'qs'

import { useDispatch, useSelector } from 'react-redux'
import { Link, useNavigate } from "react-router-dom";
import { selectFilter, setCategoryId, setCurentPage, setFilters } from "../redux/slices/filterSlice";
import Categories from "../components/Categories";
import Sort, { sortList } from "../components/Sort";
import PizzaBlock from "../components/PizzaBlock/PizzaBlock";
import { Skeleton } from "../components/PizzaBlock/Skeleton";
import Pagination from '../components/Pagination/pagination';

import { fetchPizzas, selectPizzaData } from "../redux/slices/pizzasSlice";

let Home = () => {
    const navigate = useNavigate()
    const dispatch = useDispatch()
    const isSearch = React.useRef(false)
    const isMounted = React.useRef(false)
    const { items, status } = useSelector(selectPizzaData)
    const { categoryId, sort, currentPage, searchValue } = useSelector(selectFilter)
    const sortType = sort.sortProperty



    //const [isLoading, setIsLoading] = React.useState(true); //—Å–∫–µ–ª–µ—Ç–æ–Ω
    const onChangeCategory = (id) => {

        dispatch(setCategoryId(id))

    }
    const onChangePage = number => {
        dispatch(setCurentPage(number))
    }

    const getPizzas = async () => {


        const sortBy = sortType.replace('-', '')
        const order = sortType.includes('-') ? 'asc' : 'desc'
        const category = categoryId > 0 ? `category=${categoryId}` : ''
        const search = searchValue ? `&search=${searchValue}` : ''

        dispatch(
            fetchPizzas({
                sortBy,
                order,
                category,
                search,
                currentPage,
            }),
        )

        window.scrollTo(0, 0)
    }

    React.useEffect(() => { //–¥–ª—è –≤—à–∏–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –≤ –∞–¥—Ä–µ—Å
        if (isMounted.current) {
            const queryString = qs.stringify({
                sortProperty: sortType,
                categoryId,
                currentPage,
            })
            navigate(`?${queryString}`)
        }
        isMounted.current = true

    }, [categoryId, sortType, currentPage])

    React.useEffect(() => {
        if (window.location.search) {
            const params = qs.parse(window.location.search.substring(1))
            const sort = sortList.find(obj => obj.sortProperty === params.sortProperty)
            dispatch(
                setFilters({
                    ...params,
                    sort,
                })
            )
            isSearch.current = true
        }
    }, []);

    //–ø–æ–ª—É—á–∞–µ–º –∏ –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –ø–∏—Ü—Ü—ã —Å –±—ç–∫–∞, —á—Ç–æ –±—ã –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ –Ω–µ –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–ª–æ—Å—å –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ .useEffect()
    React.useEffect(() => {
        window.scrollTo(0, 0)//–ø—Ä–∏ —Ä–µ–Ω–¥–µ—Ä–µ –æ–∫–∞–∑—ã–≤–∞–µ–º—Å—è –≤—Å–µ–≥–¥–∞ –≤ –≤–µ—Ä—Ö—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if (!isSearch.current) {
            getPizzas()
        }
        isSearch.current = false

    }, [categoryId, sortType, searchValue, currentPage]);//–µ—Å–ª–∏ –º–µ–Ω—è–µ—Ç—Å—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è(categoryId) –∏–ª–∏ —Å–æ—Ä—Ç(sortType) –≤—Å–µ–≥–¥–∞ –¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å

    const pizzas = items.map((obj) => (
        <Link key={obj.id} to={`/pizza/${obj.id}`}>
            <PizzaBlock  {...obj} />
        </Link>
    ))
    const skeletons = [...new Array(6)].map((_, index) => <Skeleton key={index} />)
    return (
        <div className="content">
            <div className="content__top">
                <Categories value={categoryId} onChangeCategory={onChangeCategory} />{/*–ø—Ä–æ–∫–∏–¥—ã–≤–∞–µ–º –ø—Ä–æ–ø—Å –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
                <Sort />
            </div>
            <h2 className="content__title">–í—Å–µ –ø–∏—Ü—Ü—ã</h2>
            {
                status === 'error' ? (
                    <div className="content__error-info">
                        <h2>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ üòï</h2>
                        <p>
                            –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–∏—Ü—Ü—ã
                        </p>
                    </div>) : (<div className="content__items">
                        {/*–ø–æ–∫–∞ –∏–¥—ë—Ç –∑–∞–≥—Ä—É–∑–∫–∞ - –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π –º–∞—Å—Å–∏–≤, —ç–ª–µ–º–µ–Ω—Ç—ã —Å–∫–µ–ª–µ—Ç–æ–Ω, –∏–Ω–∞—á–µ –ø–∏—Ü—Ü—ã*/}
                        {status === 'loading' ? skeletons : pizzas}
                    </div>)
            }

            <Pagination currentPage={currentPage} onChangePage={onChangePage} />
        </div>
    )
}

export default Home

